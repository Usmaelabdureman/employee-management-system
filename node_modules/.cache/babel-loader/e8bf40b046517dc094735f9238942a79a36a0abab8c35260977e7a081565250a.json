{"ast":null,"code":"var _jsxFileName = \"/home/usmael/Desktop/React/simple-employee-management-system/src/pages/employeeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport Filter from '../components/FilterTable';\nimport { Table, Container, TableHeader, TableBody, TableData, TableHead, TableRow, Button } from '../components/table.style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EmployeeList = () => {\n  _s();\n  const [Employee, setEmployee] = useState([]);\n  const fetchEmployees = async () => {\n    const response = await axios.get('https://63bdda61e348cb076204aebb.mockapi.io/api/v1/employee-data').catch(err => console.log(err));\n    if (response) {\n      const employees = response.data;\n      console.log(\"employees\", employees);\n      setEmployee(employees);\n    }\n  };\n  const columns = useMemo(() => [{\n    Header: \"First Name\",\n    accessor: \"firstName\"\n  }, {\n    Header: \"Last Name\",\n    accessor: \"lastName\"\n  }, {\n    Header: \"Age\",\n    accessor: \"age\"\n  }, {\n    Header: \"Gender\",\n    accessor: \"Gender\"\n  }, {\n    Header: \"email\",\n    accessor: \"email\"\n  }], []);\n  const employeesData = useMemo(() => [...Employee], [Employee]);\n  const employeesColumns = useMemo(() => Employee[0] ? Object.keys(Employee[0]).filter(key => key !== \"rating\").map(key => {\n    if (key === \"image\") return {\n      Header: key,\n      accessor: key,\n      Cell: _ref => {\n        let {\n          value\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 54\n        }, this);\n      },\n      maxWidth: 70\n    };\n    return {\n      Header: key,\n      accessor: key\n    };\n  }) : [], [Employee]);\n  const tableHooks = hooks => {\n    hooks.visibleColumns.push(columns => [...columns, {\n      id: \"Edit\",\n      Header: \"Edit\",\n      Cell: _ref2 => {\n        let {\n          row\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => alert(\"Editing: \" + row.values.price),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this);\n      }\n    }]);\n  };\n  const tableInstance = useTable({\n    columns: employeesColumns,\n    data: employeesData\n  }, useFilter, tableHooks, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    preFilteredRows,\n    setFilter,\n    state\n  } = tableInstance;\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n  const isEven = idx => idx % 2 === 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"List of Employees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        preFilteredRows: preFilteredRows,\n        setFilter: setFilter,\n        Filter: state.Filter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(TableRow, {\n            ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(TableHeader, {\n              ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: [column.render(\"Header\"), column.isSorted ? column.isSortedDesc ? \" ▼\" : \" ▲\" : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          ...getTableBodyProps(),\n          children: rows.map((row, idx) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              ...row.getRowProps(),\n              className: isEven(idx) ? \"bg-green-400 bg-opacity-30\" : \"\",\n              children: row.cells.map((cell, idx) => /*#__PURE__*/_jsxDEV(TableData, {\n                ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(EmployeeList, \"F3wMA/Opv+flWMaT13DLRF7pU0k=\", false, function () {\n  return [useTable];\n});\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","useTable","Filter","Table","Container","TableHeader","TableBody","TableData","TableHead","TableRow","Button","EmployeeList","Employee","setEmployee","fetchEmployees","response","get","catch","err","console","log","employees","data","columns","Header","accessor","employeesData","employeesColumns","Object","keys","filter","key","map","Cell","value","maxWidth","tableHooks","hooks","visibleColumns","push","id","row","alert","values","price","tableInstance","useFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","preFilteredRows","setFilter","state","isEven","idx","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps"],"sources":["/home/usmael/Desktop/React/simple-employee-management-system/src/pages/employeeList.js"],"sourcesContent":["\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport Filter from '../components/FilterTable';\n\nimport {\n    Table,\n    Container,\n    TableHeader, TableBody,\n    TableData, TableHead, TableRow, Button\n\n} from '../components/table.style';\n\nconst EmployeeList = () => {\n    const [Employee, setEmployee] = useState([]);\n    const fetchEmployees = async () => {\n        const response = await axios.get('https://63bdda61e348cb076204aebb.mockapi.io/api/v1/employee-data').catch(err => console.log(err));\n        if (response) {\n            const employees = response.data;\n            console.log(\"employees\", employees);\n\n            setEmployee(employees);\n        }\n\n    };\n\n\n    const columns = useMemo(\n        () => [\n            {\n                Header: \"First Name\",\n                accessor: \"firstName\",\n            },\n            {\n                Header: \"Last Name\",\n                accessor: \"lastName\",\n            },\n            {\n                Header: \"Age\",\n                accessor: \"age\",\n            },\n            {\n                Header: \"Gender\",\n                accessor: \"Gender\",\n            },\n            {\n                Header: \"email\",\n                accessor: \"email\",\n            },\n        ],\n        []\n    );\n    const employeesData = useMemo(() => [...Employee], [Employee]);\n\n    const employeesColumns = useMemo(\n        () =>\n            Employee[0]\n                ? Object.keys(Employee[0])\n                    .filter((key) => key !== \"rating\")\n                    .map((key) => {\n                        if (key === \"image\")\n                            return {\n                                Header: key,\n                                accessor: key,\n                                Cell: ({ value }) => <img src={value} />,\n                                maxWidth: 70,\n                            };\n\n                        return { Header: key, accessor: key };\n                    })\n                : [],\n        [Employee]\n    );\n\n    const tableHooks = (hooks) => {\n        hooks.visibleColumns.push((columns) => [\n            ...columns,\n            {\n                id: \"Edit\",\n                Header: \"Edit\",\n                Cell: ({ row }) => (\n                    <Button onClick={() => alert(\"Editing: \" + row.values.price)}>\n                        Edit\n                    </Button>\n                ),\n            },\n        ]);\n    };\n\n    const tableInstance = useTable(\n        {\n            columns: employeesColumns,\n            data: employeesData,\n        },\n        useFilter,\n        tableHooks,\n        useSortBy\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        preFilteredRows,\n        setFilter,\n        state,\n    } = tableInstance;\n\n\n    useEffect(() => {\n        fetchEmployees();\n    }, []);\n    const isEven = (idx) => idx % 2 === 0;\n\n\n    return (\n        <>\n            <Container>\n                <h1>List of Employees</h1>\n\n                <Filter\n                    preFilteredRows={preFilteredRows}\n                    setFilter={setFilter}\n                    Filter={state.Filter}\n                />\n                <Table {...getTableProps()}>\n                    <TableHead>\n                        {headerGroups.map((headerGroup) => (\n                            <TableRow {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map((column) => (\n                                    <TableHeader\n                                        {...column.getHeaderProps(column.getSortByToggleProps())}\n                                    >\n                                        {column.render(\"Header\")}\n                                        {column.isSorted ? (column.isSortedDesc ? \" ▼\" : \" ▲\") : \"\"}\n                                    </TableHeader>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableHead>\n                    <TableBody {...getTableBodyProps()}>\n                        {rows.map((row, idx) => {\n                            prepareRow(row);\n\n                            return (\n                                <TableRow\n                                    {...row.getRowProps()}\n                                    className={isEven(idx) ? \"bg-green-400 bg-opacity-30\" : \"\"}\n                                >\n                                    {row.cells.map((cell, idx) => (\n                                        <TableData {...cell.getCellProps()}>\n                                            {cell.render(\"Cell\")}\n                                        </TableData>\n                                    ))}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n\n            </Container>\n        </>\n    )\n}\n\nexport default EmployeeList;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,MAAM,MAAM,2BAA2B;AAE9C,SACIC,KAAK,EACLC,SAAS,EACTC,WAAW,EAAEC,SAAS,EACtBC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAEnC,2BAA2B;AAAC;AAAA;AAEnC,MAAMC,YAAY,GAAG,MAAM;EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMiB,cAAc,GAAG,YAAY;IAC/B,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,kEAAkE,CAAC,CAACC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;IACnI,IAAIH,QAAQ,EAAE;MACV,MAAMM,SAAS,GAAGN,QAAQ,CAACO,IAAI;MAC/BH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,SAAS,CAAC;MAEnCR,WAAW,CAACQ,SAAS,CAAC;IAC1B;EAEJ,CAAC;EAGD,MAAME,OAAO,GAAGxB,OAAO,CACnB,MAAM,CACF;IACIyB,MAAM,EAAE,YAAY;IACpBC,QAAQ,EAAE;EACd,CAAC,EACD;IACID,MAAM,EAAE,WAAW;IACnBC,QAAQ,EAAE;EACd,CAAC,EACD;IACID,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE;EACd,CAAC,EACD;IACID,MAAM,EAAE,QAAQ;IAChBC,QAAQ,EAAE;EACd,CAAC,EACD;IACID,MAAM,EAAE,OAAO;IACfC,QAAQ,EAAE;EACd,CAAC,CACJ,EACD,EAAE,CACL;EACD,MAAMC,aAAa,GAAG3B,OAAO,CAAC,MAAM,CAAC,GAAGa,QAAQ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAE9D,MAAMe,gBAAgB,GAAG5B,OAAO,CAC5B,MACIa,QAAQ,CAAC,CAAC,CAAC,GACLgB,MAAM,CAACC,IAAI,CAACjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACrBkB,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAK,QAAQ,CAAC,CACjCC,GAAG,CAAED,GAAG,IAAK;IACV,IAAIA,GAAG,KAAK,OAAO,EACf,OAAO;MACHP,MAAM,EAAEO,GAAG;MACXN,QAAQ,EAAEM,GAAG;MACbE,IAAI,EAAE;QAAA,IAAC;UAAEC;QAAM,CAAC;QAAA,oBAAK;UAAK,GAAG,EAAEA;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;MACxCC,QAAQ,EAAE;IACd,CAAC;IAEL,OAAO;MAAEX,MAAM,EAAEO,GAAG;MAAEN,QAAQ,EAAEM;IAAI,CAAC;EACzC,CAAC,CAAC,GACJ,EAAE,EACZ,CAACnB,QAAQ,CAAC,CACb;EAED,MAAMwB,UAAU,GAAIC,KAAK,IAAK;IAC1BA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAEhB,OAAO,IAAK,CACnC,GAAGA,OAAO,EACV;MACIiB,EAAE,EAAE,MAAM;MACVhB,MAAM,EAAE,MAAM;MACdS,IAAI,EAAE;QAAA,IAAC;UAAEQ;QAAI,CAAC;QAAA,oBACV,QAAC,MAAM;UAAC,OAAO,EAAE,MAAMC,KAAK,CAAC,WAAW,GAAGD,GAAG,CAACE,MAAM,CAACC,KAAK,CAAE;UAAA,UAAC;QAE9D;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;IAEjB,CAAC,CACJ,CAAC;EACN,CAAC;EAED,MAAMC,aAAa,GAAG5C,QAAQ,CAC1B;IACIsB,OAAO,EAAEI,gBAAgB;IACzBL,IAAI,EAAEI;EACV,CAAC,EACDoB,SAAS,EACTV,UAAU,EACVW,SAAS,CACZ;EAED,MAAM;IACFC,aAAa;IACbC,iBAAiB;IACjBC,YAAY;IACZC,IAAI;IACJC,UAAU;IACVC,eAAe;IACfC,SAAS;IACTC;EACJ,CAAC,GAAGV,aAAa;EAGjB/C,SAAS,CAAC,MAAM;IACZgB,cAAc,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;EACN,MAAM0C,MAAM,GAAIC,GAAG,IAAKA,GAAG,GAAG,CAAC,KAAK,CAAC;EAGrC,oBACI;IAAA,uBACI,QAAC,SAAS;MAAA,wBACN;QAAA,UAAI;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAK,eAE1B,QAAC,MAAM;QACH,eAAe,EAAEJ,eAAgB;QACjC,SAAS,EAAEC,SAAU;QACrB,MAAM,EAAEC,KAAK,CAACrD;MAAO;QAAA;QAAA;QAAA;MAAA,QACvB,eACF,QAAC,KAAK;QAAA,GAAK8C,aAAa,EAAE;QAAA,wBACtB,QAAC,SAAS;UAAA,UACLE,YAAY,CAAClB,GAAG,CAAE0B,WAAW,iBAC1B,QAAC,QAAQ;YAAA,GAAKA,WAAW,CAACC,mBAAmB,EAAE;YAAA,UAC1CD,WAAW,CAACE,OAAO,CAAC5B,GAAG,CAAE6B,MAAM,iBAC5B,QAAC,WAAW;cAAA,GACJA,MAAM,CAACC,cAAc,CAACD,MAAM,CAACE,oBAAoB,EAAE,CAAC;cAAA,WAEvDF,MAAM,CAACG,MAAM,CAAC,QAAQ,CAAC,EACvBH,MAAM,CAACI,QAAQ,GAAIJ,MAAM,CAACK,YAAY,GAAG,IAAI,GAAG,IAAI,GAAI,EAAE;YAAA;cAAA;cAAA;cAAA;YAAA,QAElE;UAAC;YAAA;YAAA;YAAA;UAAA,QAET;QAAC;UAAA;UAAA;UAAA;QAAA,QACM,eACZ,QAAC,SAAS;UAAA,GAAKjB,iBAAiB,EAAE;UAAA,UAC7BE,IAAI,CAACnB,GAAG,CAAC,CAACS,GAAG,EAAEgB,GAAG,KAAK;YACpBL,UAAU,CAACX,GAAG,CAAC;YAEf,oBACI,QAAC,QAAQ;cAAA,GACDA,GAAG,CAAC0B,WAAW,EAAE;cACrB,SAAS,EAAEX,MAAM,CAACC,GAAG,CAAC,GAAG,4BAA4B,GAAG,EAAG;cAAA,UAE1DhB,GAAG,CAAC2B,KAAK,CAACpC,GAAG,CAAC,CAACqC,IAAI,EAAEZ,GAAG,kBACrB,QAAC,SAAS;gBAAA,GAAKY,IAAI,CAACC,YAAY,EAAE;gBAAA,UAC7BD,IAAI,CAACL,MAAM,CAAC,MAAM;cAAC;gBAAA;gBAAA;gBAAA;cAAA,QAE3B;YAAC;cAAA;cAAA;cAAA;YAAA,QACK;UAEnB,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QACM;MAAA;QAAA;QAAA;QAAA;MAAA,QACR;IAAA;MAAA;MAAA;MAAA;IAAA;EAEA,iBACb;AAEX,CAAC;AAAA,GAxJKrD,YAAY;EAAA,QA4EQV,QAAQ;AAAA;AAAA,KA5E5BU,YAAY;AA0JlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}